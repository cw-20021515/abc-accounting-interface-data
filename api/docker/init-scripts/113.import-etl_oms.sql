-- delete from if_charge;
-- WITH prev_charge AS (
--     -- 각 contract_id 별로 billing_cycle - 1을 미리 계산
--     SELECT
--         oc.contract_id,
--         oc.billing_cycle + 1 AS next_billing_cycle,  -- 다음 청구 주기
--         oc.charge_status AS last_charge_status
--     FROM oms_charge oc
-- )
-- INSERT INTO if_charge (
--     id,
--     charge_id,
--     charge_status,
--     last_charge_status,
--     billing_cycle,
--     target_month,
--     contract_id,
--     start_date,
--     end_date,
--     create_time,
--     update_time
-- )
-- SELECT
--     LEFT(md5(random()::text), 12) AS id,  -- 12자리 유니크한 랜덤 문자열 생성
--     oc.id AS charge_id,
--     oc.charge_status,
--     COALESCE(pc.last_charge_status, NULL) AS last_charge_status,  -- 이전 상태 가져오기
--     oc.billing_cycle,
--     oc.target_month,
--     oc.contract_id,
--     oc.start_date,
--     oc.end_date,
--     oc.create_time,
--     oc.update_time
-- FROM oms_charge oc
--     LEFT JOIN prev_charge pc
-- ON oc.contract_id = pc.contract_id
--     AND oc.billing_cycle = pc.next_billing_cycle;  -- 현재 billing_cycle과 매칭
--
--
-- delete from if_charge_invoice;
-- INSERT INTO if_charge_invoice (
--     id,
--     charge_id,
--     invoice_id,
--     create_time,
--     update_time
-- )
-- SELECT
--     LEFT(md5(random()::text), 12) AS id,  -- 12자리 유니크한 랜덤 문자열 생성
--     oci.charge_id,
--     oci.invoice_id,
--     oci.create_time,
--     oci.update_time
-- FROM oms_charge_invoice oci;
--
-- delete from if_charge_item;
-- INSERT INTO if_charge_item (
--     charge_item_id,
--     charge_item_type,
--     quantity,
--     subtotal_price,
--     item_price,
--     discount_price,
--     prepaid_amount,
--     promotions,
--     currency,
--     is_tax_exempt,
--     charge_id,
--     service_flow_id,
--     material_id,
--     create_time,
--     update_time
-- )
-- SELECT
--     oci.id AS charge_item_id,  -- oms_charge_item.id를 charge_item_id로 사용
--     oci.charge_item_type,
--     oci.quantity,
--     oci.total_price,  -- subtotal_price = total_price
--     oci.item_price,
--     oci.discount_price,
--     oci.prepaid_amount,
--     oci.promotions,
--     oci.currency,
--     oci.is_tax_exempt,
--     oci.charge_id,
--     oci.service_flow_id,
--     oci.material_id,
--     oci.create_time,
--     oci.update_time
-- FROM oms_charge_item oci;
--
-- delete from if_charge_payment;
-- INSERT INTO if_charge_payment (
--     id,
--     payment_id,
--     transaction_type,
--     charge_id,
--     invoice_id,
--     transaction_id,
--     payment_method,
--     payment_time,
--     total_price,
--     tax,
--     subtotal_price,
--     charge_items,
--     tax_lines,
--     installment_months,
--     currency,
--     address
-- )
-- SELECT
--     ocp.id AS id,  -- oms_charge_payment.id를 그대로 사용
--     ocp.id AS payment_id,  -- payment_id도 동일한 ID 사용
--     'CHARGE' AS transaction_type,  -- 고정값
--     ocp.charge_id,
--     ocp.invoice_id,
--     ocp.transaction_id,
--     ocp.payment_method,
--     ocp.payment_time,
--     ocp.total_price,
--     COALESCE(ocp.tax, 0) AS tax,
--     (ocp.total_price - COALESCE(ocp.tax, 0)) AS subtotal_price,  -- subtotal_price = total_price - tax
--     ocp.charge_items,
--     COALESCE(ocp.tax_lines, '[]'::json) AS tax_lines,  -- NULL 값이면 빈 JSON 배열로 설정
--     ocp.installment_months,
--     ocp.currency,
--     json_build_object(
--             'firstName', ocp.first_name,
--             'lastName', ocp.last_name,
--             'email', ocp.email,
--             'phone', ocp.phone,
--             'state', ocp.state,
--             'city', ocp.city,
--             'address1', ocp.address1,
--             'address2', ocp.address2,
--             'zipcode', ocp.zipcode
--     ) AS address  -- 주소 정보를 JSON으로 생성
-- FROM oms_charge_payment ocp;
--
-- delete from if_contract;
-- INSERT INTO if_contract (
--     id,
--     contract_id,
--     contract_status,
--     last_contract_status,
--     rental_code,
--     order_item_id,
--     customer_id,
--     start_date,
--     end_date,
--     duration_in_months,
--     payment_day,
--     create_time,
--     update_time
-- )
-- SELECT DISTINCT ON (och.contract_id, och.target_status, last_contract_status)
--     LEFT(md5(random()::text), 12) AS id,  -- 12자리 유니크한 랜덤 문자열 생성
--     och.contract_id AS contract_id,
--     och.target_status AS contract_status,  -- 현재 상태
--     och.source_status as last_contract_status,
--     oc.rental_code,
--     oc.order_item_id,
--     oc.customer_id,
--     oc.start_date::date AS start_date,  -- timestamp → date 변환
--     oc.end_date::date AS end_date,  -- timestamp → date 변환
--     oc.duration_in_months,
--     COALESCE(ocpi.subscription_payment_day, 1) AS payment_day,  -- NULL 방지를 위해 기본값 1
--     (
--     SELECT MIN(och3.create_time)
--     FROM oms_contract_history och3
--     WHERE och3.contract_id = och.contract_id
--     ) AS create_time,  -- 최초 생성된 시간 (최소 create_time)
--     och.create_time AS update_time  -- oms_contract_history의 create_time 값 사용
-- FROM oms_contract_history och
--     JOIN oms_contract oc ON oc.id = och.contract_id
--     LEFT JOIN oms_contract_payment_information ocpi ON ocpi.contract_id = oc.id
-- ORDER BY och.contract_id, och.target_status, last_contract_status, och.create_time DESC;
--
-- delete from if_customer;
-- INSERT INTO if_customer (
--     customer_id,
--     email,
--     phone,
--     user_id,
--     last_name,
--     first_name,
--     account_type,
--     customer_status,
--     referrer_code,
--     create_time,
--     update_time
-- )
-- SELECT
--     cc.id,
--     cc.email,
--     cc.phone,
--     cc.user_id,
--     cc.last_name,
--     cc.first_name,
--     cc.account_type,  -- customer_type을 account_type으로 매핑
--     cc.customer_status,
--     COALESCE(cc.referrer_code, LEFT(md5(random()::text), 12) ) AS referrer_code,
--     cc.create_time,
--     cc.update_time
-- FROM oms_customer cc;
--
-- delete from if_invoice;
-- INSERT INTO if_invoice (
--     id,
--     invoice_id,
--     contract_id,
--     invoice_status,
--     billing_month,
--     payment_due_date,
--     total_price,
--     charges,
--     create_time,
--     update_time
-- )
-- SELECT
--     LEFT(md5(random()::text), 12) AS id,  -- 12자리 유니크한 랜덤 문자열 생성
--     oi.id AS invoice_id,
--     oi.contract_id,
--     oi.invoice_status,
--     oi.billing_month,
--     oi.payment_due_date,
--     oi.total_price,
--     COALESCE(oi.charges, '[]'::jsonb) AS charges,  -- NULL 방지, 기본값 빈 JSON 배열
--     oi.create_time,
--     update_time
-- FROM oms_invoice oi;
--
-- delete from if_onetime_payment;
-- INSERT INTO if_onetime_payment (
--     id,
--     payment_id,
--     transaction_type,
--     order_id,
--     transaction_id,
--     payment_method,
--     payment_time,
--     currency,
--     total_price,
--     tax,
--     subtotal_price,
--     item_price,
--     discount_price,
--     prepaid_amount,
--     registration_price,
--     promotions,
--     tax_lines,
--     address,
--     refund,
--     update_time
-- )
-- SELECT
--     LEFT(md5(random()::text), 12) AS id,  -- 12자리 유니크한 랜덤 문자열 생성
--     op.id AS payment_id,
--     'CHARGE' AS transaction_type,  -- CHARGE 고정 입력
--     op.order_id,
--     op.transaction_id,
--     op.payment_method,
--     op.payment_time,
--     op.currency,
--     op.total_price,
--     op.tax,
--     (op.total_price - COALESCE(op.tax, 0)) AS subtotal_price,  -- total_price - tax
--     op.item_price,
--     COALESCE(op.discount_price, 0),
--     COALESCE(op.prepaid_amount, 0),
--     COALESCE(op.registration_price, 0),
--     NULL::json AS promotions,  -- promotions 데이터 없음
--     -- tax_lines JSON 데이터 생성
--     COALESCE(
--     json_agg(
--     json_build_object(
--     'title', otl.title,
--     'rate', otl.rate,
--     'price', otl.price,
--     'paymentId', otl.payment_id,
--     'id', otl.id
--     )
--     ) FILTER (WHERE otl.id IS NOT NULL),
--     NULL
--     ) AS tax_lines,
--     -- address JSON 데이터 생성
--     json_build_object(
--     'firstName', op.first_name,
--     'lastName', op.last_name,
--     'email', op.email,
--     'phone', op.phone,
--     'state', op.state,
--     'city', op.city,
--     'address1', op.address1,
--     'address2', op.address2,
--     'zipcode', op.zipcode
--     ) AS address,
--     op.refund,
--     op.payment_time + (interval '120 seconds' + (random() * (3600 - 120)) * interval '1 second') AS update_time
-- FROM oms_payment op
--     LEFT JOIN oms_tax_line otl
-- ON otl.payment_id = op.id
-- GROUP BY op.id, op.order_id, op.transaction_id, op.payment_method, op.payment_time, op.currency,
--     op.total_price, op.tax, op.item_price, op.discount_price, op.prepaid_amount,
--     op.registration_price, op.email, op.first_name, op.last_name, op.phone,
--     op.state, op.city, op.address1, op.address2, op.zipcode, op.refund;
--
-- delete from if_order_item;
-- WITH
--     ordered_history AS (
--         -- 상태 변화 흐름을 정렬 (create_time 기준)
--         SELECT
--             order_item_id,
--             source_status,
--             target_status,
--             create_time
--         FROM oms_order_item_history
--         ORDER BY order_item_id, create_time ASC
--     ),
--
--     first_event AS (
--         -- 각 order_item_id 에서 가장 오래된 source_status를 가져와 최초 상태를 기록
--         SELECT DISTINCT ON (order_item_id)
--     oh.order_item_id,
--     oh.source_status ,
--     oh.source_status AS target_status, -- 최초 상태에서는 source 와 target 이 동일
--     (
--     SELECT DISTINCT ON (oi.id) oi.create_time
--     FROM oms_order_item oi
--     WHERE oh.order_item_id = oi.id
--     ) AS create_time
-- FROM ordered_history oh
--     ),
--
--     all_ordered_history AS (
-- -- first_event를 ordered_history에 추가하여 전체적인 흐름을 유지
-- SELECT
--     order_item_id,
--     source_status,
--     target_status,
--     create_time
-- FROM first_event
-- UNION ALL
-- SELECT
--     order_item_id,
--     source_status ,
--     target_status ,
--     create_time
-- FROM ordered_history
--     ),
--
--     subsequent_events AS (
-- -- 이후 상태 변화를 순차적으로 가져옴
-- SELECT
--     order_item_id,
--     CASE
--     WHEN(target_status) IS NULL THEN source_status
--     ELSE target_status
--     END AS order_item_status,
--     CASE
--     WHEN(target_status) IS NULL THEN NULL
--     ELSE source_status
--     END AS last_order_item_status,
--     create_time
-- FROM all_ordered_history
--     )
-- INSERT INTO if_order_item (
--     id,
--     order_item_id,
--     order_item_status,
--     last_order_item_status,
--     order_product_type,
--     order_item_type,
--     order_id,
--     channel_id,
--     customer_id,
--     referrer_code,
--     contract_id,
--     material_id,
--     quantity,
--     address,
--     tax,
--     tax_lines,
--     subtotal_price,
--     item_price,
--     discount_price,
--     registration_price,
--     create_time,
--     update_time
-- )
-- SELECT distinct on(oc.order_item_id,order_item_status,last_order_item_status)
--     LEFT(md5(random()::text), 12) AS id,  -- 12자리 유니크한 랜덤 ID 생성
--     fh.order_item_id,
--     fh.order_item_status,
--     fh.last_order_item_status,
--     oo.order_product_type,  -- oms_order에서 order_product_type 가져오기
--     ooi.order_item_type,
--     ooi.order_id,
--     oo.channel_id,
--     oo.customer_id,
--     oo.referrer_code,
--     oc.id AS contract_id,  -- oms_contract에서 order_item_id를 검색하여 contract_id 매핑
--     ooi.material_id,
--     ooi.quantity,
--     -- address JSON 데이터 생성
--     json_build_object(
--     'orderId', ooi.order_id,
--     'lastName', oda.last_name,
--     'firstName', oda.first_name,
--     'address1', oda.address1,
--     'address2', oda.address2,
--     'zipcode', oda.zipcode,
--     'city', oda.city,
--     'state', oda.state,
--     'phone', oda.phone,
--     'email', oda.email,
--     'latitude', oda.latitude,
--     'longitude', oda.longitude,
--     'id', oda.id
--     ) AS address,
--     COALESCE(ooi.tax, 0) AS tax,
--     tl.tax_lines,
--     (ooi.total_price - COALESCE(ooi.tax, 0)) AS subtotal_price,  -- total_price - tax
--     ooi.item_price,
--     COALESCE(ooi.discount_price, 0),
--     ooi.registration_price,
--     ooi.create_time,
--     fh.create_time as update_time
-- FROM subsequent_events fh
--     JOIN oms_order_item ooi ON ooi.id = fh.order_item_id
--     JOIN oms_order oo ON oo.id = ooi.order_id
--     LEFT JOIN oms_contract oc ON oc.order_item_id = ooi.id
--     LEFT JOIN (
--     SELECT
--     otl.order_item_id,
--     json_agg(
--     json_build_object(
--     'title', otl.title,
--     'rate', otl.rate,
--     'price', otl.price,
--     'paymentId', otl.payment_id,
--     'id', otl.id
--     )
--     ) AS tax_lines
--     FROM oms_tax_line otl
--     GROUP BY otl.order_item_id
--     ) tl ON tl.order_item_id = ooi.id
--     LEFT JOIN oms_delivery_address oda ON oda.order_id = ooi.order_id;
--
-- delete from if_service_flow;
-- with
--     sequenced_service_flow as
--         (
--             select
--                 service_flow_id,
--                 source_status as last_service_status,
--                 target_status as service_status,
--                 create_time
--             from oms_service_history
--         )
-- INSERT INTO if_service_flow (
--     id,
--     service_flow_id,
--     service_status,
--     last_service_status,
--     service_type,
--     install_id,
--     serial_number,
--     branch_id,
--     warehouse_id,
--     technician_id,
--     order_item_id,
--     create_time,
--     update_time
-- )
-- SELECT distinct on(service_flow_id,service_status,last_service_status)
--     LEFT(md5(random()::text), 12) AS id,  -- 12자리 유니크한 랜덤 문자열 생성
--     se.service_flow_id,
--     se.service_status,
--     se.last_service_status,
--     osf.service_type,
--     osf.id AS install_id,
--     oi.serial_number,
--     oi.branch_id,
--     oi.warehouse_id,
--     oi.technician_id,
--     osf.order_item_id,
--     osf.create_time,
--     se.create_time as update_time
-- FROM sequenced_service_flow se
--     JOIN oms_service_flow osf ON osf.id = se.service_flow_id
--     LEFT JOIN oms_installation_information oi ON osf.id = oi.service_flow_id;